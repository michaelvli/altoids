// show.js.erb is called by the following scenarios: 
// 1) 	User views venue information in the rightPane prior to making any updates (i.e. executing the "show" 
//		action in venues controller.
// 2) 	After user successfully updates venue information (i.e. successfully executing the "update" action 
//		in venues controller).

	if (<%= params.has_key?(:updated) && params[:updated] %>) // Scenario #2 - successful update
	{
		var rightPaneTitle = $("#rightPane-title");

		// update status message in rightPane
		$("#rightPane").find(".status_message").html("<%= escape_javascript(render partial: 'layouts/messages', flash: flash) %>");
		
		// refresh venue name in navbar of rightPane if changed
		if (rightPaneTitle.text() != "<%= escape_javascript(@venue.name) %>")
		{
			rightPaneTitle.fadeOut().text("<%= escape_javascript(@venue.name) %>").fadeIn();
		}
	}
	else // Scenario #1 - show.html.erb is called by show action and inserted into rightPane or mainPane
	{
		// Except for .preloader, hide all elements within #slider-body; appropriate forms
//		$("#slider").find("div.body").children().not(".preloader").hide();
		
		// Show dynamic content inserted in #slider-content
//		$("#slider-content").show(); // show the relevant page: 1)dynamic content (#slider-content), 2) #sign_up_form, 3) #log_in_form, or 4) #filter_sort_menu
	}
		
	// load contents of partial: views_mobile/venues/_show.html.erb into rightPane
	$("#rightPane").find(".dynamicContent").html("<%= escape_javascript(render partial: 'show') %>");
	
	// preload contents for edit in case user wants to modify info
	$("#slider-content").html("<%= escape_javascript(render partial: 'edit') %>");

	fadeInContent();  // ensures thumbnails are fully loaded before preloader.gif fades out
	
//	rightPane: "Edit Venue" button	
	bindTouchButtons({
		scope: "#venue_show",
		buttonCollection: "button.bottomNavbarButton",
		mode: "flash",
		callback: function(){
			// the "this" variable represents the $(this) jquery object passed in from the .call($(this)) 
			// method of either:
			// 1. the "keypress" event, or
			// 2. the "touchend" event
			// within bindTouchButtons.  
			// If the callback is invoked by the "keypress" event, then the "this" represents the "input" 
			// element within the "scope" parameter of this function.  On the other hand, if the callback is
			// invoked by the "touchend" event, then $(this) represents the "buttonCollection" parameter of 
			// this function.  Either way, preLoadContent() finds the parent "form" element of $(this), 
			// regardless whether it represents the "input" element or buttonCollection to determine the 
			// appropriate Rails controller/action.
			var sliderTitle = this.data("title");
			toggleSlider({
				title: sliderTitle,
				sliderChild: "#slider-content"
			});
		}
	});

	//	slider: "Update Venue" button
	bindTouchButtons({
		scope: "#slider",
		buttonCollection: "button.bottomNavbarButton",
		mode: "flash",
		callback: function(){
		
			// preLoadContent() has fadeInContent set to false which means function will not call loadContent();
			// thus, .preloader will not be displayed (bc loadContent displays .preloader) which is why it must 
			// be called here (and then faded out upon executing the code in the corresponding js.erb file)
			$("#rightPane").find(".preloader").show();

			// the "this" variable represents the $(this) jquery object passed in from the .call($(this)) 
			// method of either:
			// 1. the "keypress" event, or
			// 2. the "touchend" event
			// within bindTouchButtons.  
			// If the callback is invoked by the "keypress" event, then the "this" represents the "input" 
			// element within the "scope" parameter of this function.  On the other hand, if the callback is
			// invoked by the "touchend" event, then $(this) represents the "buttonCollection" parameter of 
			// this function.  Either way, preLoadContent() finds the parent "form" element of $(this), 
			// regardless whether it represents the "input" element or buttonCollection to determine the 
			// appropriate Rails controller/action.			
			var jqObj = this;
			toggleSlider({
				state: "close",
				callback: function(){
					// trigger update action in venues controller	
					preLoadContent(jqObj,{ 
						fadeInContent: false // prevent content from fading in; instead execute code in corresponding js.erb file ("show.js.erb" or "show.js.erb", depending on validation status)
					});
				}
			}); // close slider		
		}
	});
	
// BEGIN DEBUG //
if (debug)
{	
	<!-- rightPane: "Edit Venue" button -->
	$("#venue_show").on("click", "button.bottomNavbarButton", function(event){
		var jqObj = $(this);
		var sliderTitle = jqObj.data("title");
		toggleSlider({
			title: sliderTitle,
			sliderChild: "#slider-content"
		});

		event.preventDefault();
	});

	<!-- slider: "Update Venue" button -->
	<!-- need to use .off() preceding the .on() since #slider element is never "refreshed" via .html() -->
	$("#slider").off("click", "button.bottomNavbarButton").on("click", "button.bottomNavbarButton", function(event){
		// preLoadContent() has fadeInContent set to false which means function will not call loadContent();
		// thus, .preloader will not be displayed (bc loadContent displays .preloader) which is why it must 
		// be called here (and then faded out upon executing the code in the appropriate js.erb file
		$("#rightPane").find(".preloader").show();
		
		var jqObj = $(this);
		toggleSlider({
			state: "close",
			callback: function(){
				// trigger update action in venues controller	
				preLoadContent(jqObj,{ 
					fadeInContent: false // prevent content from fading in; instead execute code in corresponding js.erb file ("show.js.erb" or "show.js.erb", depending on validation status)
				});
			}
		}); // close slider
		
		event.preventDefault();
	});
}
// END DEBUG //