if ($("#mainPane").find("#tearsheet").length)
{
	var pane = $("#mainPane");
}
else
{
	var pane = $("#rightPane");
	pane.find(".dynamicContent").html("<div id='tearsheet'></div>");
}

pane.find("#tearsheet").html("<%= escape_javascript(render partial: 'tearsheet') %>");
	
// initializes carousel with one active carousel item and sets slide interval speed
initCarousel();

// initialize left/right swiping on carousel
initTouchOnCarousel()

//  binds a touch handler for the 5 icon buttons on the venue tearsheet that toggle map, hours, features, website, and phone number info about a venue
//  initTearsheetOptions() allows user to toggle map, hours, features, website, and phone number info about a venue
bindTouchButtons({
	scope: "#tearsheet_options",
	buttonCollection: ".btn-glass",
	mode: "toggle_one",
	callback: function(){
		initTearsheetOptions(this); // "this" passes the $(this) object to initTearsheetOptions(button_obj) function
	}
});

// truncates event descriptions
$('#tearsheet').find('.dotdotdot').dotdotdot({
	watch: true, //	Whether to update the ellipsis as the window resizes: true/'window'
	callback	: function( isTruncated, orgContent ) {	
	}//	Callback function that is fired after the ellipsis is added, receives two parameters: isTruncated(boolean), orgContent(string).
});

//  binds a touch handler for the Event buttons (i.e. the buttons that contain a calendar date and show event details) 
// toggleEventDescription() allows user to toggle between full and partial descriptions of the event
bindTouchButtons({
	scope: "#tearsheet_events",
	buttonCollection: ".btn-glass",
	mode: "flash",
	callback: function(){
		toggleEventDescription(this); // "this" passes the $(this) object to initEventButtons(button_obj) function
	}
});


// 	bind the play button in videos to control:
// 	1) carousel cycling, and 
//	2) playing and resuming partially watched videos
//$("#myCarousel").find("video").each(function(){
//	var video = $(this);
//	video.off("webkitbeginfullscreen")
//	video.off("webkitendfullscreen")
//
//	// iOS enters fullscreen when user is watching video
//	video.on("webkitbeginfullscreen", function(){
//		$("#myCarousel").carousel("pause"); // pause carousel cycle
//		video.get(0).play(); // restarts a video from where the user left off		
//	});
//	
//	// iOS exits fullscreen when user is watching video
//	video.on("webkitendfullscreen", function(){
//		$("#myCarousel").carousel("cycle"); // restart carousel cycle
//		video.get(0).pause(); // pauses the video
//	});
//
////	video.on("play", function(){
////		$("#myCarousel").carousel("pause"); // pause carousel cycle
////	});
//	
////	video.on("ended", function(){
////		$("#myCarousel").carousel("cycle"); // restart carousel cycle
////	});
//});



/* debug */
/*
$("#tearsheet_options").on("click", ".btn-glass", function(){
	initTearsheetOptions($(this)); // "this" passes the $(this) object to activateTearsheetOptions(button_obj) function
});

$("#tearsheet_events").on("click", ".btn-glass", function(event){
	toggleEventDescription($(this)); // "this" passes the $(this) object to initEventButtons(button_obj) function

	event.preventDefault();
});
*/